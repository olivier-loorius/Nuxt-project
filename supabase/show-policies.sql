-- ============================================================
-- üîí AFFICHAGE POLICIES RLS - Conditions Lisibles
-- ============================================================
--
-- ‚ö†Ô∏è COPIER-COLLER DANS SUPABASE SQL EDITOR
--
-- INSTRUCTIONS:
-- 1. Ouvrir Supabase Dashboard
-- 2. Aller dans SQL Editor
-- 3. Copier-coller la query ci-dessous
-- 4. Cliquer sur "Run"
-- 5. Analyser les conditions USING et WITH CHECK
--
-- OBJECTIF:
-- Afficher les policies RLS avec leurs conditions en format lisible
-- Utilise pg_get_expr() pour afficher les expressions SQL compl√®tes
--
-- ============================================================

SELECT
  policyname,
  cmd,
  CASE
    WHEN qual IS NOT NULL THEN pg_get_expr(qual, 'profiles'::regclass)
    ELSE 'N/A'
  END as using_expr,
  CASE
    WHEN with_check IS NOT NULL THEN pg_get_expr(with_check, 'profiles'::regclass)
    ELSE 'N/A'
  END as check_expr
FROM pg_policies
WHERE schemaname = 'public'
  AND tablename = 'profiles'
ORDER BY cmd, policyname;

-- ============================================================
-- üìã EXPLICATION DES COLONNES
-- ============================================================
--
-- policyname  : Nom de la policy RLS
-- cmd         : Op√©ration SQL (SELECT, INSERT, UPDATE, DELETE)
-- using_expr  : Expression USING (condition pour lire les lignes)
-- check_expr  : Expression WITH CHECK (condition pour √©crire)
--
-- pg_get_expr() convertit l'expression stock√©e en format lisible
--
-- ============================================================
-- üéØ R√âSULTATS ATTENDUS
-- ============================================================
--
-- policyname                    | cmd    | using_expr        | check_expr
-- ------------------------------|--------|-------------------|-------------------
-- Users can insert own profile  | INSERT | N/A               | (auth.uid() = id)
-- Users can select own profile  | SELECT | (auth.uid() = id) | N/A
-- Users can update own profile  | UPDATE | (auth.uid() = id) | (auth.uid() = id)
--
-- ============================================================
-- üìä INTERPR√âTATION DES R√âSULTATS
-- ============================================================
--
-- Policy INSERT:
-- - using_expr: N/A (normal, INSERT ne lit pas de lignes existantes)
-- - check_expr: (auth.uid() = id)
--   ‚Üí Emp√™che de cr√©er un profil avec un ID diff√©rent de auth.uid()
--
-- Policy SELECT:
-- - using_expr: (auth.uid() = id)
--   ‚Üí Filtre les lignes: l'utilisateur ne voit QUE son propre profil
-- - check_expr: N/A (normal, SELECT ne modifie pas de donn√©es)
--
-- Policy UPDATE:
-- - using_expr: (auth.uid() = id)
--   ‚Üí Cible les lignes: l'utilisateur ne peut modifier QUE son profil
-- - check_expr: (auth.uid() = id)
--   ‚Üí V√©rifie apr√®s modification: l'ID ne peut PAS √™tre chang√©
--
-- ============================================================
-- ‚úÖ V√âRIFICATIONS DE S√âCURIT√â
-- ============================================================
--
-- 1. V√©rifier que auth.uid() appara√Æt dans toutes les expressions
--    ‚úÖ Bon: (auth.uid() = id)
--    ‚úÖ Bon: ((auth.uid())::text = (id)::text)
--    ‚ùå Mauvais: N/A l√† o√π il devrait y avoir une condition
--    ‚ùå Mauvais: (true) ‚Üí Permet tout acc√®s
--
-- 2. V√©rifier la comparaison avec la colonne 'id'
--    ‚úÖ Bon: auth.uid() = id
--    ‚ùå Mauvais: auth.uid() = autre_colonne
--
-- 3. V√©rifier les combinaisons USING/CHECK
--    INSERT: using_expr = N/A, check_expr = condition ‚úÖ
--    SELECT: using_expr = condition, check_expr = N/A ‚úÖ
--    UPDATE: using_expr = condition, check_expr = condition ‚úÖ
--    DELETE: using_expr = condition, check_expr = N/A ‚úÖ
--
-- ============================================================
-- ‚ö†Ô∏è PROBL√àMES COURANTS
-- ============================================================
--
-- Probl√®me 1: Aucun r√©sultat
-- ‚Üí Aucune policy RLS sur la table profiles
-- ‚Üí Action: Cr√©er les policies RLS
--
-- Probl√®me 2: using_expr = N/A pour SELECT ou UPDATE
-- ‚Üí Aucune condition USING, acc√®s total aux lignes
-- ‚Üí Action: Recr√©er la policy avec USING (auth.uid() = id)
--
-- Probl√®me 3: check_expr = N/A pour INSERT ou UPDATE
-- ‚Üí Aucune v√©rification √† l'√©criture
-- ‚Üí Action: Recr√©er la policy avec WITH CHECK (auth.uid() = id)
--
-- Probl√®me 4: Expression = (true)
-- ‚Üí Condition toujours vraie, aucune protection
-- ‚Üí Action: Remplacer par (auth.uid() = id)
--
-- ============================================================
-- üîç QUERIES BONUS
-- ============================================================

-- V√©rifier que RLS est activ√© sur la table profiles
SELECT
  tablename,
  rowsecurity AS rls_enabled
FROM pg_tables
WHERE schemaname = 'public'
  AND tablename = 'profiles';

-- R√©sultat attendu:
-- tablename | rls_enabled
-- ----------|-------------
-- profiles  | t           (t = true, RLS activ√©)

-- Si rls_enabled = f (false):
-- ‚Üí Ex√©cuter: ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- ============================================================
-- üìä QUERY BONUS: R√©sum√© complet s√©curit√©
-- ============================================================

SELECT
  'Row Level Security' AS security_feature,
  CASE
    WHEN (SELECT rowsecurity FROM pg_tables WHERE schemaname = 'public' AND tablename = 'profiles')
    THEN 'Activ√© ‚úÖ'
    ELSE 'D√©sactiv√© ‚ùå'
  END AS status
UNION ALL
SELECT
  'Nombre de policies RLS',
  COUNT(*)::text || ' policies'
FROM pg_policies
WHERE schemaname = 'public' AND tablename = 'profiles'
UNION ALL
SELECT
  'Policy SELECT',
  CASE WHEN EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'profiles' AND cmd = 'SELECT')
  THEN 'Existe ‚úÖ' ELSE 'Manquante ‚ùå' END
UNION ALL
SELECT
  'Policy INSERT',
  CASE WHEN EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'profiles' AND cmd = 'INSERT')
  THEN 'Existe ‚úÖ' ELSE 'Manquante ‚ùå' END
UNION ALL
SELECT
  'Policy UPDATE',
  CASE WHEN EXISTS (SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'profiles' AND cmd = 'UPDATE')
  THEN 'Existe ‚úÖ' ELSE 'Manquante ‚ùå' END;

-- R√©sultat attendu (exemple sain):
-- security_feature        | status
-- ------------------------|---------------
-- Row Level Security      | Activ√© ‚úÖ
-- Nombre de policies RLS  | 3 policies
-- Policy SELECT           | Existe ‚úÖ
-- Policy INSERT           | Existe ‚úÖ
-- Policy UPDATE           | Existe ‚úÖ

-- ============================================================
-- üõ†Ô∏è COMMENT CR√âER LES POLICIES SI MANQUANTES
-- ============================================================
--
-- Si les policies n'existent pas ou sont incorrectes, ex√©cuter:
--
-- -- 1. Activer RLS
-- ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
--
-- -- 2. Supprimer anciennes policies (si n√©cessaire)
-- DROP POLICY IF EXISTS "Users can select own profile" ON profiles;
-- DROP POLICY IF EXISTS "Users can insert own profile" ON profiles;
-- DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
--
-- -- 3. Cr√©er nouvelles policies
-- CREATE POLICY "Users can select own profile"
--   ON profiles FOR SELECT
--   TO authenticated
--   USING (auth.uid() = id);
--
-- CREATE POLICY "Users can insert own profile"
--   ON profiles FOR INSERT
--   TO authenticated
--   WITH CHECK (auth.uid() = id);
--
-- CREATE POLICY "Users can update own profile"
--   ON profiles FOR UPDATE
--   TO authenticated
--   USING (auth.uid() = id)
--   WITH CHECK (auth.uid() = id);
--
-- ============================================================
-- FIN DU SCRIPT
-- ============================================================
