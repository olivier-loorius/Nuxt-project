<template>
  <div class="space-y-6">
    <!-- Loader si user pas chargé -->
    <div v-if="!isUserReady" class="bg-white border-2 border-concrete p-8">
      <div class="flex items-center justify-center py-12">
        <div class="text-center">
          <div class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-amber border-t-transparent mb-4"></div>
          <p class="text-midnight/60 font-medium">Chargement de votre profil...</p>
        </div>
      </div>
    </div>

    <!-- Section Informations Personnelles -->
    <div v-else class="bg-white border-2 border-concrete p-8">
      <div class="mb-8 border-l-4 border-amber pl-6">
        <h2 class="text-2xl font-bold text-midnight tracking-tight uppercase mb-1">
          Informations personnelles
        </h2>
        <p class="text-midnight/60">
          Gérez vos informations de profil
        </p>
      </div>

      <form @submit.prevent="handleSubmit" class="max-w-3xl">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
          <!-- Email (full width) -->
          <div class="md:col-span-2">
            <label for="email" class="block text-xs font-bold text-amber mb-2 tracking-widest uppercase">
              {{ $t('compte.profil.email') }}
            </label>
            <input
              id="email"
              v-model="formData.email"
              type="email"
              disabled
              class="w-full px-5 py-4 border-2 border-concrete/50 bg-concrete/20 text-midnight/40 cursor-not-allowed font-mono"
            />
            <p class="text-xs text-midnight/50 mt-2 tracking-wide">
              L'email ne peut pas être modifié
            </p>
          </div>

          <!-- First Name -->
          <div>
            <label for="firstName" class="block text-xs font-bold text-midnight/70 mb-2 tracking-widest uppercase">
              {{ $t('compte.profil.first_name') }}
            </label>
            <input
              id="firstName"
              v-model="formData.firstName"
              type="text"
              class="w-full px-5 py-4 border-2 border-concrete bg-white text-midnight focus:outline-none focus:border-amber transition-all placeholder:text-midnight/30"
              placeholder="Jean"
            />
          </div>

          <!-- Last Name -->
          <div>
            <label for="lastName" class="block text-xs font-bold text-midnight/70 mb-2 tracking-widest uppercase">
              {{ $t('compte.profil.last_name') }}
            </label>
            <input
              id="lastName"
              v-model="formData.lastName"
              type="text"
              class="w-full px-5 py-4 border-2 border-concrete bg-white text-midnight focus:outline-none focus:border-amber transition-all placeholder:text-midnight/30"
              placeholder="Dupont"
            />
          </div>

          <!-- Phone with Country Code -->
          <div class="md:col-span-2">
            <label for="phone" class="block text-xs font-bold text-midnight/70 mb-2 tracking-widest uppercase">
              {{ $t('compte.profil.phone') }}
            </label>
            <div class="flex gap-2">
              <select
                v-model="formData.countryCode"
                class="w-32 px-3 py-4 border-2 border-concrete bg-white text-midnight focus:outline-none focus:border-amber transition-all font-mono"
              >
                <option value="+33">🇫🇷 +33</option>
                <option value="+1">🇺🇸 +1</option>
                <option value="+44">🇬🇧 +44</option>
                <option value="+49">🇩🇪 +49</option>
                <option value="+34">🇪🇸 +34</option>
                <option value="+39">🇮🇹 +39</option>
                <option value="+32">🇧🇪 +32</option>
                <option value="+41">🇨🇭 +41</option>
                <option value="+352">🇱🇺 +352</option>
              </select>
              <input
                id="phone"
                v-model="formData.phoneNumber"
                type="tel"
                @input="formatPhoneNumber"
                class="flex-1 px-5 py-4 border-2 border-concrete bg-white text-midnight focus:outline-none focus:border-amber transition-all placeholder:text-midnight/30 font-mono"
                placeholder="6 12 34 56 78"
                maxlength="15"
              />
            </div>
            <p v-if="phoneError" class="text-xs text-red-600 mt-2">
              {{ phoneError }}
            </p>
            <p v-else class="text-xs text-midnight/50 mt-2 tracking-wide">
              Format: chiffres uniquement (espaces acceptés)
            </p>
          </div>
        </div>

        <!-- Actions - Boutons carrés et masculins -->
        <div class="flex gap-3 mt-8">
          <button
            type="submit"
            :disabled="!isUserReady || loading"
            class="px-8 py-4 bg-amber text-midnight border-2 border-amber font-bold tracking-wide uppercase hover:bg-amber/90 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {{ loading ? 'Enregistrement...' : $t('compte.profil.save') }}
          </button>
          <button
            type="button"
            @click="resetForm"
            class="px-8 py-4 border-2 border-concrete text-midnight font-bold tracking-wide uppercase hover:bg-midnight/5 hover:border-midnight transition-all"
          >
            {{ $t('compte.profil.cancel') }}
          </button>
        </div>

        <!-- Success Message -->
        <div v-if="success" class="mt-6 p-5 bg-emerald-500/10 border-2 border-emerald-500/30 text-emerald-600 font-medium">
          ✓ Profil mis à jour avec succès !
        </div>

        <!-- Error Message -->
        <div v-if="error" class="mt-6 p-5 bg-red-500/10 border-2 border-red-500/30 text-red-600 font-medium">
          ✕ {{ error }}
        </div>
      </form>
    </div>

    <!-- Section Sécurité -->
    <div v-if="isUserReady" class="bg-white border-2 border-concrete p-8">
      <div class="mb-8 border-l-4 border-copper pl-6">
        <h2 class="text-2xl font-bold text-midnight tracking-tight uppercase mb-1">
          Sécurité
        </h2>
        <p class="text-midnight/60">
          Modifier votre mot de passe
        </p>
      </div>

      <form @submit.prevent="handlePasswordChange" class="max-w-3xl space-y-5">
        <div>
          <label for="currentPassword" class="block text-xs font-bold text-midnight/70 mb-2 tracking-widest uppercase">
            Mot de passe actuel
          </label>
          <input
            id="currentPassword"
            v-model="passwordData.current"
            type="password"
            class="w-full px-5 py-4 border-2 border-concrete bg-white text-midnight focus:outline-none focus:border-copper transition-all"
            placeholder="••••••••"
          />
        </div>

        <div>
          <label for="newPassword" class="block text-xs font-bold text-midnight/70 mb-2 tracking-widest uppercase">
            Nouveau mot de passe
          </label>
          <input
            id="newPassword"
            v-model="passwordData.new"
            type="password"
            class="w-full px-5 py-4 border-2 border-concrete bg-white text-midnight focus:outline-none focus:border-copper transition-all"
            placeholder="••••••••"
          />
          <p class="text-xs text-midnight/50 mt-2">Minimum 6 caractères</p>
        </div>

        <div>
          <label for="confirmPassword" class="block text-xs font-bold text-midnight/70 mb-2 tracking-widest uppercase">
            Confirmer le mot de passe
          </label>
          <input
            id="confirmPassword"
            v-model="passwordData.confirm"
            type="password"
            class="w-full px-5 py-4 border-2 border-concrete bg-white text-midnight focus:outline-none focus:border-copper transition-all"
            placeholder="••••••••"
          />
        </div>

        <button
          type="submit"
          :disabled="loadingPassword"
          class="px-8 py-4 bg-copper text-white border-2 border-copper font-bold tracking-wide uppercase hover:bg-copper/90 transition-all disabled:opacity-50"
        >
          {{ loadingPassword ? 'Modification...' : 'Modifier le mot de passe' }}
        </button>

        <div v-if="passwordSuccess" class="p-5 bg-emerald-500/10 border-2 border-emerald-500/30 text-emerald-600 font-medium">
          ✓ Mot de passe modifié avec succès !
        </div>

        <div v-if="passwordError" class="p-5 bg-red-500/10 border-2 border-red-500/30 text-red-600 font-medium">
          ✕ {{ passwordError }}
        </div>
      </form>
    </div>

    <!-- Section Actions du compte -->
    <div v-if="isUserReady" class="bg-white border-2 border-concrete p-8">
      <div class="mb-8 border-l-4 border-midnight/30 pl-6">
        <h2 class="text-2xl font-bold text-midnight tracking-tight uppercase mb-1">
          Gestion du compte
        </h2>
        <p class="text-midnight/60">
          Actions sur votre compte
        </p>
      </div>

      <div class="max-w-3xl">
        <button
          @click="showDeleteConfirm = true"
          class="group flex items-center gap-3 px-5 py-4 text-sm text-midnight/60 hover:text-red-600 transition-all"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
          </svg>
          <span class="group-hover:underline">Supprimer mon compte</span>
        </button>
      </div>
    </div>

    <!-- Modal de confirmation de suppression - Élégante -->
    <div v-if="showDeleteConfirm" class="fixed inset-0 z-50 flex items-center justify-center bg-midnight/60 backdrop-blur-sm p-4" @click.self="showDeleteConfirm = false">
      <div class="bg-white border-2 border-concrete max-w-lg w-full p-8 shadow-xl">
        <div class="flex items-start gap-4 mb-6">
          <div class="flex-shrink-0 w-12 h-12 rounded-full bg-red-500/10 flex items-center justify-center">
            <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <div class="flex-1">
            <h3 class="text-xl font-bold text-midnight mb-2">
              Supprimer votre compte ?
            </h3>
            <p class="text-sm text-midnight/70 leading-relaxed">
              Cette action est définitive et supprimera l'ensemble de vos données, y compris vos commandes, adresses et favoris.
            </p>
          </div>
        </div>

        <div class="flex gap-3">
          <button
            @click="showDeleteConfirm = false"
            class="flex-1 px-6 py-3 border-2 border-concrete text-midnight font-medium tracking-wide hover:bg-midnight/5 transition-all"
          >
            Annuler
          </button>
          <button
            @click="handleDeleteAccount"
            :disabled="loadingDelete"
            class="flex-1 px-6 py-3 bg-red-600 text-white font-medium tracking-wide hover:bg-red-700 transition-all disabled:opacity-50"
          >
            {{ loadingDelete ? 'Suppression...' : 'Confirmer' }}
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { toast } from 'vue-sonner'

definePageMeta({
  layout: 'compte',
  middleware: 'auth'
})

const { t } = useI18n()
const user = useSupabaseUser()
const supabase = useSupabaseClient()
const router = useRouter()

const loading = ref(false)
const success = ref(false)
const error = ref('')

const loadingPassword = ref(false)
const passwordSuccess = ref(false)
const passwordError = ref('')

const showDeleteConfirm = ref(false)
const loadingDelete = ref(false)

const phoneError = ref('')

const formData = ref({
  email: '',
  firstName: '',
  lastName: '',
  countryCode: '+33',
  phoneNumber: '',
  phone: ''
})

const passwordData = ref({
  current: '',
  new: '',
  confirm: ''
})

// Computed pour vérifier que l'utilisateur est chargé
const isUserReady = computed(() => {
  return user.value !== null && user.value?.id !== undefined
})

// Fonction pour valider et formater le numéro de téléphone
const formatPhoneNumber = () => {
  // Supprimer tous les caractères non numériques sauf les espaces
  let cleaned = formData.value.phoneNumber.replace(/[^\d\s]/g, '')

  // Vérifier si le numéro contient des lettres
  if (/[a-zA-Z]/.test(formData.value.phoneNumber)) {
    phoneError.value = 'Le numéro ne peut contenir que des chiffres'
    return
  }

  // Mise à jour du champ nettoyé
  formData.value.phoneNumber = cleaned
  phoneError.value = ''
}

// Fonction pour parser un numéro complet en indicatif + numéro
const parsePhoneNumber = (fullPhone: string) => {
  if (!fullPhone) return { countryCode: '+33', phoneNumber: '' }

  // Essayer de détecter l'indicatif
  const indicators = ['+33', '+1', '+44', '+49', '+34', '+39', '+32', '+41', '+352']
  for (const code of indicators) {
    if (fullPhone.startsWith(code)) {
      return {
        countryCode: code,
        phoneNumber: fullPhone.substring(code.length).trim()
      }
    }
  }

  // Par défaut, utiliser +33
  return { countryCode: '+33', phoneNumber: fullPhone }
}

// Initialiser les données du formulaire
onMounted(async () => {
  console.log('🔍 DEBUG onMounted - User loaded:', user.value)
  console.log('🔍 DEBUG onMounted - user.value?.id:', user.value?.id)

  // Vérifier la session au chargement
  const { data: sessionData } = await supabase.auth.getSession()
  console.log('🔍 DEBUG onMounted - Session Supabase:', sessionData)

  if (user.value) {
    const savedPhone = user.value.user_metadata?.phone || ''
    const { countryCode, phoneNumber } = parsePhoneNumber(savedPhone)

    formData.value = {
      email: user.value.email || '',
      firstName: user.value.user_metadata?.firstName || '',
      lastName: user.value.user_metadata?.lastName || '',
      countryCode,
      phoneNumber,
      phone: savedPhone
    }
  }
})

const resetForm = () => {
  if (user.value) {
    const savedPhone = user.value.user_metadata?.phone || ''
    const { countryCode, phoneNumber } = parsePhoneNumber(savedPhone)

    formData.value = {
      email: user.value.email || '',
      firstName: user.value.user_metadata?.firstName || '',
      lastName: user.value.user_metadata?.lastName || '',
      countryCode,
      phoneNumber,
      phone: savedPhone
    }
  }
  success.value = false
  error.value = ''
  phoneError.value = ''
}

// Watch pour attendre le chargement de l'utilisateur si session existe mais user est null
watch(user, async (newUser) => {
  console.log('🔍 DEBUG watch user - Changement détecté:', newUser)
  console.log('🔍 DEBUG watch user - user.value?.id:', newUser?.id)

  if (newUser && newUser.id) {
    console.log('✅ User chargé via watch, initialisation du formulaire')
    const savedPhone = newUser.user_metadata?.phone || ''
    const { countryCode, phoneNumber } = parsePhoneNumber(savedPhone)

    formData.value = {
      email: newUser.email || '',
      firstName: newUser.user_metadata?.firstName || '',
      lastName: newUser.user_metadata?.lastName || '',
      countryCode,
      phoneNumber,
      phone: savedPhone
    }
  }
}, { immediate: true })

const handleSubmit = async () => {
  // Early return si user pas chargé
  if (!user.value) {
    console.error('❌ Erreur: user.value est null')
    toast.error(t('profile.updateError'), {
      description: 'Chargement en cours, veuillez patienter...'
    })
    return
  }

  loading.value = true
  success.value = false
  error.value = ''
  phoneError.value = ''

  // DEBUG: Afficher l'état complet de l'utilisateur et de la session
  console.log('🔍 DEBUG handleSubmit - user.value entier:', user.value)
  console.log('🔍 DEBUG handleSubmit - user.value?.id:', user.value?.id)

  // Vérifier la session Supabase
  const { data: sessionData } = await supabase.auth.getSession()
  console.log('🔍 DEBUG handleSubmit - session Supabase:', sessionData)

  // Vérifier que l'utilisateur est connecté et que l'ID existe
  if (!user.value?.id) {
    console.error('❌ Erreur: user.value ou user.value.id est undefined')
    error.value = t('profile.notAuthenticated')
    loading.value = false
    toast.error(t('profile.updateError'), {
      description: t('profile.notAuthenticated')
    })
    return
  }

  console.log('✅ User ID:', user.value.id)

  // Valider le numéro de téléphone
  if (formData.value.phoneNumber) {
    const cleanPhone = formData.value.phoneNumber.replace(/\s/g, '')

    // Vérifier que le numéro ne contient que des chiffres
    if (!/^\d+$/.test(cleanPhone)) {
      phoneError.value = t('profile.phoneInvalid')
      loading.value = false
      toast.error(t('profile.validationFailed'), {
        description: t('profile.phoneInvalid')
      })
      return
    }

    // Vérifier la longueur minimale (au moins 6 chiffres)
    if (cleanPhone.length < 6) {
      phoneError.value = t('profile.phoneShort')
      loading.value = false
      toast.error(t('profile.validationFailed'), {
        description: t('profile.phoneShort')
      })
      return
    }
  }

  try {
    // Construire le numéro complet avec l'indicatif
    const fullPhone = formData.value.phoneNumber
      ? `${formData.value.countryCode} ${formData.value.phoneNumber.trim()}`
      : ''

    // 1. Mettre à jour auth.users metadata
    const { error: updateError } = await supabase.auth.updateUser({
      data: {
        firstName: formData.value.firstName,
        lastName: formData.value.lastName,
        phone: fullPhone
      }
    })

    if (updateError) {
      console.error('❌ Erreur updateUser auth.users:', updateError)
      throw updateError
    }

    console.log('✅ Auth.users metadata mis à jour avec succès')

    // 2. Synchroniser avec la table profiles
    const { error: updateError2 } = await supabase
      .from('profiles')
      .update({
        first_name: formData.value.firstName,
        last_name: formData.value.lastName,
        phone: fullPhone,
        updated_at: new Date().toISOString()
      })
      .eq('id', user.value?.id)

    if (updateError2) {
      console.error('❌ Erreur update table profiles:', updateError2)
      throw updateError2
    }

    console.log('✅ Table profiles synchronisée avec succès')

    // Mettre à jour le champ phone dans formData
    formData.value.phone = fullPhone

    success.value = true
    toast.success(t('profile.updateSuccess'), {
      description: t('profile.updateSuccessDescription')
    })

    setTimeout(() => {
      success.value = false
    }, 3000)
  } catch (e: any) {
    error.value = e.message || t('errors.generic')
    toast.error(t('profile.updateError'), {
      description: error.value
    })
  } finally {
    loading.value = false
  }
}

const handlePasswordChange = async () => {
  loadingPassword.value = true
  passwordSuccess.value = false
  passwordError.value = ''

  // Validation
  if (!passwordData.value.current || !passwordData.value.new || !passwordData.value.confirm) {
    passwordError.value = 'Tous les champs sont requis'
    toast.error('Champs manquants', {
      description: 'Veuillez remplir tous les champs'
    })
    loadingPassword.value = false
    return
  }

  if (passwordData.value.new.length < 6) {
    passwordError.value = 'Le mot de passe doit contenir au moins 6 caractères'
    toast.error('Mot de passe trop court', {
      description: 'Minimum 6 caractères requis'
    })
    loadingPassword.value = false
    return
  }

  if (passwordData.value.new !== passwordData.value.confirm) {
    passwordError.value = 'Les mots de passe ne correspondent pas'
    toast.error('Erreur de confirmation', {
      description: 'Les mots de passe ne correspondent pas'
    })
    loadingPassword.value = false
    return
  }

  try {
    const { error: updateError } = await supabase.auth.updateUser({
      password: passwordData.value.new
    })

    if (updateError) throw updateError

    passwordSuccess.value = true
    toast.success('Mot de passe modifié', {
      description: 'Votre mot de passe a été mis à jour'
    })

    // Réinitialiser le formulaire
    passwordData.value = { current: '', new: '', confirm: '' }

    setTimeout(() => {
      passwordSuccess.value = false
    }, 5000)
  } catch (e: any) {
    passwordError.value = e.message || 'Erreur lors de la modification du mot de passe'
    toast.error('Erreur de modification', {
      description: passwordError.value
    })
  } finally {
    loadingPassword.value = false
  }
}

const handleDeleteAccount = async () => {
  loadingDelete.value = true

  try {
    // Supprimer l'utilisateur de Supabase Auth
    const { error: deleteError } = await supabase.rpc('delete_user')

    if (deleteError) {
      // Si la fonction RPC n'existe pas, on sign out quand même
      console.warn('RPC delete_user not found, signing out instead')
      await supabase.auth.signOut()
    }

    toast.success('Compte supprimé', {
      description: 'Votre compte a été supprimé définitivement'
    })

    // Rediriger vers la page d'accueil
    setTimeout(() => {
      router.push('/')
    }, 1000)
  } catch (e: any) {
    error.value = e.message || 'Erreur lors de la suppression du compte'
    toast.error('Erreur de suppression', {
      description: error.value
    })
    showDeleteConfirm.value = false
  } finally {
    loadingDelete.value = false
  }
}
</script>
